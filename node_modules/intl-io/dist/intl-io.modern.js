var NumberCulture =
/*#__PURE__*/
function () {
  function NumberCulture(cultures) {
    this.cultures = cultures;
  }

  var _proto = NumberCulture.prototype;

  _proto.load = function load() {
    var numberFormat = new Intl.NumberFormat(this.cultures);
    var text = numberFormat.format('0.1');
    this.decimalSeparator = text[1];
    this.decimalSepRegex = new RegExp('\\' + this.decimalSeparator, 'g');
  };

  _proto.parse = function parse(text) {
    if (typeof text != 'string' || !text) return null;
    if (!this.decimalSeparator) this.load();
    var clean = '';

    for (var i = 0; i < text.length; i++) {
      if (text[i] == this.decimalSeparator || text[i] >= '0' && text[i] <= '9' || text[i] == '-') clean += text[i];
    }

    var en = clean.replace(this.decimalSepRegex, '.');
    return parseFloat(en);
  };

  _proto.format = function format(number, options) {
    return this.getFormatter(options).format(number);
  };

  _proto.getFormatter = function getFormatter(options) {
    return new Intl.NumberFormat(this.cultures, options);
  };

  return NumberCulture;
}();

var weekdayFormats = ['narrow', 'short', 'long'];
var monthFormats = ['narrow', 'short', 'long'];
var defaultOptions = {
  useCurrentDateForDefaults: false,
  loose: false
};
var DateTimeCulture =
/*#__PURE__*/
function () {
  function DateTimeCulture(cultures) {
    this.cultures = cultures;
  }

  var _proto = DateTimeCulture.prototype;

  _proto.format = function format(date, options) {
    return this.getFormatter(options).format(date);
  };

  _proto.getFormatter = function getFormatter(options) {
    return new Intl.DateTimeFormat(this.cultures, parseOptions(options));
  };

  _proto.getWeekdayNames = function getWeekdayNames(fmt) {
    this.load();
    return this.weekdayNames.map(function (x) {
      return x[fmt];
    });
  };

  _proto.getMonthNames = function getMonthNames(fmt) {
    this.load();
    return this.monthNames.map(function (x) {
      return x[fmt];
    });
  };

  _proto.parse = function parse(text, _temp) {
    var _this = this;

    var _ref = _temp === void 0 ? defaultOptions : _temp,
        useCurrentDateForDefaults = _ref.useCurrentDateForDefaults,
        loose = _ref.loose;

    if (typeof text !== 'string' || !text) return null;
    this.load();

    var _splitDateAndTime = splitDateAndTime(strip8206(text)),
        date = _splitDateAndTime.date,
        time = _splitDateAndTime.time;

    var dateParts = extractParts(date);
    var result = {
      year: undefined,
      month: undefined,
      date: undefined,
      hour: 0,
      minute: 0,
      second: 0
    };
    var unmatchedPart = false;
    dateParts.alphas.forEach(function (value) {
      for (var i = 0; i < 12; i++) {
        for (var fmt in _this.monthNames[i]) {
          if (value === _this.monthNames[i][fmt].toLowerCase()) {
            result.month = i + 1;
            return;
          }
        }
      }

      unmatchedPart = true;
    });
    dateParts.numbers.forEach(function (value) {
      if (value > 31) result.year = value;else if (value > 12) result.date = value;else {
        for (var dp = 0; dp < _this.dateParts.length; dp++) {
          var name = _this.dateParts[dp];

          if (result[name] === undefined) {
            result[name] = value;
            return;
          }
        }

        unmatchedPart = true;
      }
    });
    if (unmatchedPart && !loose) return NaN;

    if (useCurrentDateForDefaults) {
      if (result.date === undefined) if (result.month === undefined) result.date = new Date().getDate();else result.date = 1;
      if (result.month === undefined) if (result.year === undefined) result.month = new Date().getMonth() + 1;else result.month = 1;
      if (result.year === undefined) result.year = new Date().getFullYear();
    }

    var timeComponent = ['hour', 'minute', 'second'];
    var timeParts = extractParts(time);

    for (var i = 0; i < Math.min(timeParts.numbers.length, timeComponent.length); i++) {
      result[timeComponent[i]] = timeParts.numbers[i];
    }

    timeParts.alphas.forEach(function (x) {
      if (x.toLowerCase() === 'pm' && result.hour > 0 && result.hour < 12) result.hour += 12;
      if (x.toLowerCase() === 'am' && result.hour === 12) result.hour = 0;
    });
    if (result.date >= 1 && result.date <= 31 && result.month >= 1 && result.month <= 12) return new Date(result.year, result.month - 1, result.date, result.hour, result.minute, result.second);
    return Number.NaN;
  };

  _proto.load = function load() {
    var _this2 = this;

    if (this.loaded) return;
    var i;
    var monthNames = [];

    for (var m = 0; m < 12; m++) {
      monthNames.push({});
    }

    monthFormats.forEach(function (monthFormat) {
      var dateFormat = new Intl.DateTimeFormat(_this2.cultures, {
        month: monthFormat
      });

      for (i = 0; i < 12; i++) {
        monthNames[i][monthFormat] = strip8206(dateFormat.format(new Date(2000, i, 15))).replace('.', '');
      }
    });
    this.monthNames = monthNames;
    var weekdayNames = [];

    for (i = 0; i < 7; i++) {
      weekdayNames.push({});
    }

    weekdayFormats.forEach(function (weekdayFormat) {
      var dateFormat = new Intl.DateTimeFormat(_this2.cultures, {
        weekday: weekdayFormat
      });

      for (i = 0; i < 7; i++) {
        var date = new Date(2000, 0, i, 12, 0, 0);
        weekdayNames[date.getDay()][weekdayFormat] = strip8206(dateFormat.format(date)).replace('.', '');
      }
    });
    this.weekdayNames = weekdayNames;
    var testDate = new Date(2077, 10, 22);
    var localeDate = new Intl.DateTimeFormat(this.cultures).format(testDate);
    var localeDateFmt = localeDate.replace(2077, 'year').replace(11, 'month').replace(22, 'date');
    this.dateParts = extractParts(localeDateFmt).alphas;
    this.loaded = true;
  };

  return DateTimeCulture;
}();

function parseOptions(fmt) {
  if (typeof fmt !== 'string') return fmt;
  var count = {
    Y: 0,
    y: 0,
    M: 0,
    D: 0,
    d: 0,
    H: 0,
    h: 0,
    m: 0,
    i: 0,
    S: 0,
    s: 0,
    A: 0,
    a: 0,
    P: 0,
    p: 0,
    N: 0,
    n: 0,
    T: 0,
    t: 0,
    U: 0,
    u: 0,
    Z: 0,
    z: 0
  };

  for (var i = 0; i < fmt.length; i++) {
    count[fmt[i]]++;
  }

  var options = {};
  var year = count.Y + count.y;
  if (year > 2) options.year = 'numeric';else if (year > 0) options.year = '2-digit';
  var month = count.M;
  if (month > 3) options.month = 'long';else if (month > 2) options.month = 'short';else if (month > 1) options.month = '2-digit';else if (month > 0) options.month = 'numeric';
  var day = count.d;
  if (day > 1) options.day = '2-digit';else if (day > 0) options.day = 'numeric';
  var weekday = count.D;
  if (weekday > 3) options.weekday = 'long';else if (weekday > 1) options.weekday = 'short';else if (weekday > 0) options.weekday = 'narrow';
  var hours = count.H + count.h;
  if (hours > 1) options.hour = '2-digit';else if (hours > 0) options.hour = 'numeric';
  var minute = count.m;
  if (minute > 1) options.minute = '2-digit';else if (minute > 0) options.minute = 'numeric';
  var second = count.S + count.s;
  if (second > 1) options.second = '2-digit';else if (second > 0) options.second = 'numeric';
  var timeZoneName = count.T + count.t;
  if (timeZoneName > 3) options.timeZoneName = 'long';else if (timeZoneName > 0) options.timeZoneName = 'short';
  var hour12 = count.A + count.a + count.P + count.p;
  if (hour12) options.hour12 = true;
  var noctis = count.N + count.n;
  if (noctis) options.hour12 = false;
  var utc = count.U + count.u + count.Z + count.z;
  if (utc > 0) options.timeZone = 'UTC';
  return options;
}

function splitDateAndTime(text) {
  var split = text.indexOf(':');
  if (split === -1) return {
    date: text,
    time: ''
  };

  while (split > 0 && text[split - 1] >= '0' && text[split - 1] <= '9') {
    split--;
  }

  return {
    date: text.substring(0, split),
    time: text.substring(split)
  };
}

function extractParts(text) {
  var numbers = [];
  var alphas = [];
  var mode = '',
      newMode,
      c,
      start = 0,
      part;

  for (var i = 0; i <= text.length; i++) {
    if (i === text.length) newMode = 'end';else {
      c = text[i];
      if (c.match(/[a-z]/i)) newMode = 'alpha';else if (c.match(/[0-9]/)) newMode = 'number';else newMode = 'sep';
    }
    if (newMode === mode) continue;

    if (i > start) {
      part = text.substring(start, i);
      if (mode === 'alpha') alphas.push(part.toLowerCase());else if (mode === 'number') numbers.push(parseInt(part));
    }

    start = i;
    mode = newMode;
  }

  return {
    alphas: alphas,
    numbers: numbers
  };
}

function strip8206(str) {
  return str.replace(/\u200E/g, '');
}

export { DateTimeCulture, NumberCulture, monthFormats, weekdayFormats };
//# sourceMappingURL=intl-io.modern.js.map
