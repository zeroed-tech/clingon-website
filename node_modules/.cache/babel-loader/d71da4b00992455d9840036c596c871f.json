{"ast":null,"code":"var _jsxFileName = \"/home/justice/Development/clingon-website/clingon/src/components/pages/Store.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { store_products } from '../../Assets/data'; // import StoreProductDisplay from '../StoreProductDisplay'\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Cart from '../Cart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Store() {\n  _s();\n\n  let [order, setOrder] = useState([]);\n  let [orderSubtotal, setOrderSubtotal] = useState(0);\n\n  let reducer = () => {\n    let num = 0;\n\n    if (order.length > 0) {\n      order.forEach(each => {\n        num += each.price * each.amount;\n      });\n      setOrderSubtotal(num.toFixed(2));\n    } else {\n      setOrderSubtotal(0);\n    }\n  };\n\n  let updateOrder = newItem => {\n    order = removeDuplicates(newItem);\n    reducer();\n    setOrder(order);\n  };\n\n  let removeDuplicates = objectToInsert => {\n    if (order.find(match => match.id == objectToInsert.id)) {\n      order.forEach((item, index) => {\n        if (item.id == objectToInsert.id) {\n          if (objectToInsert.amount >= 0) {\n            return order[index] = objectToInsert;\n          } else {\n            return order.splice(index, 1);\n          }\n        }\n      });\n    } else {\n      order.push(objectToInsert);\n    }\n\n    return order;\n  };\n\n  let getStock = () => {\n    fetch('http://clingonaustralia.com.au/stock').then(resp => resp.json()).then(data => data).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        lg: {\n          span: 8\n        },\n        children: getStock().map(product => {\n          return /*#__PURE__*/_jsxDEV(StoreProductDisplay, {\n            id: product['id'],\n            name: product['name'],\n            price: product['price'],\n            RRP: product['RRP'],\n            removeDuplicates: removeDuplicates,\n            updateOrder: updateOrder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: {\n          span: 4\n        },\n        style: {\n          backgroundColor: 'white'\n        },\n        children: /*#__PURE__*/_jsxDEV(Cart, {\n          orderedItems: order,\n          orderSubtotal: orderSubtotal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Store, \"Ksdf94lLZ5sUHRiBxL+cTqbS9yw=\");\n\n_c = Store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"sources":["/home/justice/Development/clingon-website/clingon/src/components/pages/Store.js"],"names":["React","useState","useEffect","store_products","Container","Row","Col","Cart","Store","order","setOrder","orderSubtotal","setOrderSubtotal","reducer","num","length","forEach","each","price","amount","toFixed","updateOrder","newItem","removeDuplicates","objectToInsert","find","match","id","item","index","splice","push","getStock","fetch","then","resp","json","data","catch","err","console","error","span","map","product","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { store_products } from '../../Assets/data'\n// import StoreProductDisplay from '../StoreProductDisplay'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Cart from '../Cart'\n\nexport default function Store() {\n    let [order, setOrder] = useState([])\n    let [orderSubtotal, setOrderSubtotal] = useState(0)\n\n    let reducer = () => {\n        let num = 0\n        if (order.length > 0) {\n\n        \n        order.forEach(each => {\n            num += (each.price * each.amount)\n        })\n        setOrderSubtotal(num.toFixed(2))\n    } else {\n        setOrderSubtotal(0)\n    }\n    }\n    let updateOrder = (newItem) => {\n\n        order = removeDuplicates(newItem)\n        reducer()\n        \n        setOrder(order)\n\n    }\n    let removeDuplicates = (objectToInsert) => {\n        if (order.find(match => match.id == objectToInsert.id)) {\n            order.forEach((item, index) => {\n                if (item.id == objectToInsert.id) {\n\n                    if (objectToInsert.amount >= 0) {\n                        return order[index] = objectToInsert\n\n                    } else {\n                       return order.splice(index, 1)\n                    }\n                }\n            })\n        } else {\n            order.push(objectToInsert)\n        }\n        \n        return order\n    }\n    let getStock = () => {\n        fetch('http://clingonaustralia.com.au/stock')\n        .then(resp => resp.json())\n        .then(data => data)\n        .catch(err => console.error(err))\n    }\n    return (\n        <Container>\n            <Row>\n                <Col lg={{ span: 8 }}>\n                    {getStock().map((product) => {\n                        return <StoreProductDisplay id={product['id']} name={product['name']} price={product['price']} RRP={product['RRP']} removeDuplicates={removeDuplicates} updateOrder={updateOrder} />\n                    })}\n                </Col>\n                <Col lg={{ span: 4 }} style={{ backgroundColor: 'white' }}>\n                    <Cart orderedItems={order} orderSubtotal={orderSubtotal}/>\n                </Col>\n\n            </Row>\n        </Container>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}