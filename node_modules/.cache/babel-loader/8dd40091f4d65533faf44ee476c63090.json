{"ast":null,"code":"var _jsxFileName = \"/home/justice/Development/clingon-website/clingon/src/components/pages/Store.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { store_products } from '../../Assets/data';\nimport StoreProductDisplay from '../StoreProductDisplay';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Cart from '../Cart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Store() {\n  _s();\n\n  let [order, setOrder] = useState([]);\n  let [orderSubtotal, setOrderSubtotal] = useState(0);\n\n  let removeDuplicates = (id, objectToInsert) => {\n    order.forEach((item, index) => {\n      if (item.item.id == id) {\n        order[index] = objectToInsert;\n      }\n    });\n    return order;\n  };\n\n  let updateOrder = (newItem, amount, id) => {\n    let objectToInsert = {\n      item: newItem,\n      amount: amount\n    };\n    order = removeDuplicates(id, objectToInsert);\n\n    if (!amount == '') {\n      setOrderSubtotal(orderSubtotal + newItem.price * amount);\n      setOrder([order]);\n    } else {\n      setOrder([order]);\n    }\n\n    console.log(order);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        lg: {\n          span: 11\n        },\n        children: store_products.map(product => {\n          return /*#__PURE__*/_jsxDEV(StoreProductDisplay, {\n            id: product['id'],\n            name: product['name'],\n            price: product['price'],\n            RRP: product['RRP'],\n            removeDuplicates: removeDuplicates,\n            updateOrder: updateOrder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: {\n          span: 1\n        },\n        style: {\n          backgroundColor: 'white'\n        },\n        children: /*#__PURE__*/_jsxDEV(Cart, {\n          orderedItems: order,\n          orderSubtotal: orderSubtotal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Store, \"Ksdf94lLZ5sUHRiBxL+cTqbS9yw=\");\n\n_c = Store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"sources":["/home/justice/Development/clingon-website/clingon/src/components/pages/Store.js"],"names":["React","useState","store_products","StoreProductDisplay","Container","Row","Col","Cart","Store","order","setOrder","orderSubtotal","setOrderSubtotal","removeDuplicates","id","objectToInsert","forEach","item","index","updateOrder","newItem","amount","price","console","log","span","map","product","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC5B,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,CAAD,CAAhD;;AACA,MAAIY,gBAAgB,GAAG,CAACC,EAAD,EAAKC,cAAL,KAAwB;AAE3CN,IAAAA,KAAK,CAACO,OAAN,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3B,UAAID,IAAI,CAACA,IAAL,CAAUH,EAAV,IAAgBA,EAApB,EAAwB;AACpBL,QAAAA,KAAK,CAACS,KAAD,CAAL,GAAeH,cAAf;AACH;AACJ,KAJD;AAKA,WAAON,KAAP;AACH,GARD;;AASA,MAAIU,WAAW,GAAG,CAACC,OAAD,EAAUC,MAAV,EAAkBP,EAAlB,KAAyB;AACvC,QAAIC,cAAc,GAAG;AAACE,MAAAA,IAAI,EAAEG,OAAP;AAAgBC,MAAAA,MAAM,EAAEA;AAAxB,KAArB;AACAZ,IAAAA,KAAK,GAAGI,gBAAgB,CAACC,EAAD,EAAKC,cAAL,CAAxB;;AACA,QAAI,CAACM,MAAD,IAAW,EAAf,EAAmB;AACfT,MAAAA,gBAAgB,CAACD,aAAa,GAAIS,OAAO,CAACE,KAAR,GAAgBD,MAAlC,CAAhB;AACAX,MAAAA,QAAQ,CAAC,CACLD,KADK,CAAD,CAAR;AAIH,KAND,MAMO;AACHC,MAAAA,QAAQ,CAAC,CACLD,KADK,CAAD,CAAR;AAGH;;AACDc,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AAEH,GAhBD;;AAiBA,sBACI,QAAC,SAAD;AAAA,2BACI,QAAC,GAAD;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAACgB,UAAAA,IAAI,EAAE;AAAP,SAAT;AAAA,kBACKvB,cAAc,CAACwB,GAAf,CAAoBC,OAAD,IAAa;AAC7B,8BAAO,QAAC,mBAAD;AAAqB,YAAA,EAAE,EAAEA,OAAO,CAAC,IAAD,CAAhC;AAAwC,YAAA,IAAI,EAAEA,OAAO,CAAC,MAAD,CAArD;AAA+D,YAAA,KAAK,EAAEA,OAAO,CAAC,OAAD,CAA7E;AAAwF,YAAA,GAAG,EAAEA,OAAO,CAAC,KAAD,CAApG;AAA6G,YAAA,gBAAgB,EAAEd,gBAA/H;AAAiJ,YAAA,WAAW,EAAEM;AAA9J;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAFA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAACM,UAAAA,IAAI,EAAE;AAAP,SAAT;AAAoB,QAAA,KAAK,EAAE;AAACG,UAAAA,eAAe,EAAE;AAAlB,SAA3B;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,YAAY,EAAEnB,KAApB;AAA2B,UAAA,aAAa,EAAEE;AAA1C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA5CuBH,K;;KAAAA,K","sourcesContent":["import React, {useState} from 'react'\nimport { store_products } from '../../Assets/data'\nimport StoreProductDisplay from '../StoreProductDisplay'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Cart from '../Cart'\n\nexport default function Store() {\n    let [order, setOrder] = useState([])\n    let [orderSubtotal, setOrderSubtotal] = useState(0)\n    let removeDuplicates = (id, objectToInsert) => {\n        \n        order.forEach((item, index) => {\n            if (item.item.id == id) {\n                order[index] = objectToInsert\n            }\n        })\n        return order\n    }\n    let updateOrder = (newItem, amount, id) => {\n        let objectToInsert = {item: newItem, amount: amount}\n        order = removeDuplicates(id, objectToInsert)\n        if (!amount == '') {\n            setOrderSubtotal(orderSubtotal + (newItem.price * amount))\n            setOrder([\n                order,\n                \n            ])\n        } else {\n            setOrder([\n                order\n            ])\n        }\n        console.log(order)\n        \n    }   \n    return (\n        <Container>\n            <Row>\n                <Col lg={{span: 11}}>\n                    {store_products.map((product) => {\n                        return <StoreProductDisplay id={product['id']} name={product['name']} price={product['price']} RRP={product['RRP']} removeDuplicates={removeDuplicates} updateOrder={updateOrder} />\n                    })}\n                </Col>\n                <Col lg={{span: 1}} style={{backgroundColor: 'white'}}>\n                    <Cart orderedItems={order} orderSubtotal={orderSubtotal}/>\n                </Col>\n           \n            </Row>\n        </Container>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}